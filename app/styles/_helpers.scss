.pull-left {
    float: left;
}

.pull-right {
    float: right;
}

.clearfix {
    @include clearfix();
}
.no-padding {
    padding: 0 !important;
}
.no-margin {
    margin: 0 !important;
}
.no-border {
    border: 0 !important;
}
.no-line-height {
    line-height: 0 !important;
}

.cursor-pointer {
    cursor: pointer;
}

// Display helper classes
// --------------------------------------------------

.sd-d-none {
    display: none !important;
}
.sd-d-inline {
    display: inline !important;
}
.sd-d-inline-block {
    display: inline-block !important;
}
.sd-d-block {
    display: block !important;
}
.sd-d-flex {
    display: flex !important;
}
.sd-d-inline-flex {
    display: inline-flex !important;
}

// Hide if empty
.sd-empty:empty {
    display: none !important;
}

// Overflow helper classes
// --------------------------------------------------
.overflow-auto {
    overflow: auto !important;
}
.overflow-hidden {
    overflow: hidden !important;
}
.overflow-x-hidden {
    overflow-x: hidden !important;
}

// Shadow helper classes
// --------------------------------------------------

$sd-shadowProperties: (
    'z1': (0 1px 3px rgba(0,0,0,.16), 0 0 1px rgba(0,0,0,.1)),
    'z2': (0 1px 4px rgba(0,0,0,.16), 0 2px 6px rgba(0,0,0,.12), 0 0 1px rgba(0,0,0,.1)),
    'z3': (0 1px 6px rgba(0,0,0,.16), 0 3px 8px rgba(0,0,0,.24), 0 0 1px rgba(0,0,0,.1)),
    'z4': (0 2px 10px rgba(0,0,0,.2), 0 6px 16px rgba(0,0,0,.3), 0 0 1px rgba(0,0,0,.1)),
);
// Add more shadow items with this syntax and new classes will be generated:
// z5: (0 2px 10px rgba(0,0,0,.2), ... ),
// Output:
// .sd-shadow--z5 { 0 2px 10px rgba(0,0,0,.2),...

@mixin shadowMixinExtend {
    transition: box-shadow 0.3s ease-out;
    &.btn:active {
        box-shadow: none !important;
        transition: box-shadow 0.4s ease-out;
    }
}

@each $name, $value in $sd-shadowProperties {
    .sd-shadow--#{$name} {
        box-shadow: #{$value} !important;
        @include shadowMixinExtend;
    }
}

// sd-shadow mixin
// Uses items from $sd-shadowProperties as parameter (z1, z2...)
// You can create new classes with this syntax:
// .customClass { @include sd-shadow(z1); color: #fff; }
// Output:
// .customClass { box-shadow: 0 1px 3px rgba(0, 0, 0, 0.16), 0 0 1px rgba(0, 0, 0, 0.1); color: #fff; }

@mixin sd-shadow($sd-shadowPropertiesItem) {
    box-shadow: #{map-get($sd-shadowProperties, $sd-shadowPropertiesItem)};
}

// How to use sd-shadow mixin
// .nekaKlasa {
//     color: red;
//     @include sd-shadow('z1');
// }



// Webkit scroll
// --------------------------------------------------

::-webkit-scrollbar {
    width: 8px;
    height: 8px;
    margin: -1px 0;
    position: fixed;
    right: 10px;
}
::-webkit-scrollbar:hover {
    background-color: rgba(140,140,140,.2);
    cursor: pointer;
}

::-webkit-scrollbar-thumb {
    background: rgba(0,0,0,.3);
}
::-webkit-scrollbar-thumb:hover {
    background: rgba(0,0,0,.6);
    cursor: pointer;
}

// text overflow
// --------------------------------------------------

.sd-overflow-ellipsis {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
}

// content no wrap 
// --------------------------------------------------

.sd-no-wrap {
    white-space: nowrap;
}

// Element with badge
.element-with-badge {
    display: inline-block;
    position: relative;
    .badge {
      position: absolute;
      top: -.9rem;
      right: -.9rem;
    }
    + .element-with-badge, + .btn {
      margin-left: 1.2rem;
      vertical-align: top;
    }
}
.btn + .element-with-badge {
    margin-left: 1.2rem;
    vertical-align: top;
}

// Deafult headings 
// --------------------------------------------------

.sd-heading-3 {
    font-size: 1.6rem;
    margin-bottom: 1.6rem; 
}

// Deafult text syles based on type of data  
// --------------------------------------------------
p strong {
    font-weight: 500;
}
time {
    color: #747474;
    font-weight: 300;
    letter-spacing: .025em;
    &.small {
        font-size: calc(100% - 0.1rem);
    }
}

// General text helpers

.sd-text__normal {
    font-weight: 400;
}
.sd-text__normal {
    font-weight: 400;
}
.sd-text__strong, .sd-text__strong-s {
    font-weight: 500;
}
.sd-text__italic {
    font-style: italic;
}
.sd-text__right {
    text-align: right;
}
.sd-text__center {
    text-align: center;
}
.sd-text__serif {
    font-family:'Merriweather', Georgia, 'Times New Roman', Times, serif !important;
}
// Superdesk specific text helpers 
.sd-text__slugline {
    color: $sd-slugline;
    font-weight: 500;
    font-size: 1.2rem;
    text-transform: uppercase;
    margin-right: 1rem;
}
.sd-text__title {
    color: inherit;
    font-weight: 500;
    font-size: 1.6rem;
    line-height: 1.4;
}

.sd-text {
    color: inherit;
    font-weight: 300;
    line-height: 1.5;
    &--medium {
        font-size: 1.4rem;
    }
    &--large {
        font-size: 1.6rem;
    }
}
.sd-text__date-time {
    color: #747474;
    font-weight: 300;
    letter-spacing: .025em;
    &--small {
        font-size: 1.2rem;
    }
}
.sd-text__date-and-author {
    font-size: 1.2rem;
}
.sd-text__author {
    font-weight: 500;
    //color: $sd-text;
}
.sd-text__info {
    font-weight: 300;
    color: $grayText;
}

.dark-ui {
    .sd-text__slugline {
        color: $sd-slugline-darkUI;
    }
}


// Dashboard content header
.dashboard-content-header {
    display: flex;
    padding: 1.5rem;
}

.big-number-block {
    display: flex;
    color: $grayNeutral;

    &__number {
        font-size: 3.6rem;
        font-weight: 300;
        line-height: 100%;
        letter-spacing: -.02em;
    }
    &__text {
        margin: 0 1rem;
        line-height: 120%;
        font-weight: 300;
    }

    &--grow {
        flex-grow: 1;
    }
    &--center {
        align-items: center;
    }
}
.dashboard-thumbnail-block {
    display: flex;

    &__image {
        border: 1px solid #d6d6d6;
    }
    &__meta {
        padding: 0 1rem;
        display: flex;
        flex-direction: column;
    }
    &__label {
        font-size: 1.2rem;
        color: $grayLight;
    }
    &__heading {
        display: flex;
        font-weight: 700;
        padding: .3rem 0;

        i {
            margin-right: .5rem;
        }
    }
    &__link {
        color: $sd-colour-interactive__base;
        text-decoration: none;
        border-bottom: 1px dotted $sd-colour-interactive__base;
        &:hover {
            border-bottom: 1px solid $sd-colour-interactive__base;
            text-decoration: none;
            color: $sd-colour-interactive__base;
        }
    }
}

.sd-text-icon {
    display: inline-flex;
    i {
        margin-right: 0.3rem;
    }
}
.sd-text-icon + .sd-text-icon {
    margin-right: 1rem;
}
.sd-text-icon.sd-text-icon--aligned-r + .sd-text-icon.sd-text-icon--aligned-r {
    margin-right: 0;
    margin-left: 1rem;
}

// opacity
.sd-opacity--20 {
    opacity: 0.2 !important;
}
.sd-opacity--25 {
    opacity: 0.25 !important;
}
.sd-opacity--30 {
    opacity: 0.3 !important;
}
.sd-opacity--40 {
    opacity: 0.4 !important;
}
.sd-opacity--50 {
    opacity: 0.5 !important;
}
.sd-opacity--60 {
    opacity: 0.6 !important;
}
.sd-opacity--75 {
    opacity: 0.75 !important;
}


// panel border
.panel-border-left {
    border-right: 0;
    border-left: 2px solid rgba(0, 0, 0, 0.4);
}
.panel-border-right {
    border-left: 0;
    border-right: 2px solid rgba(0, 0, 0, 0.4);
}


// auto margin

.ml-auto,
.sd-margin-l--auto {
    margin-left: auto !important;
}
.mr-auto,
.sd-margin-r--auto {
    margin-right: auto !important;
}
.mt-auto,
.sd-margin-t--auto {
    margin-top: auto !important;
}
.mb-auto,
.sd-margin-b--auto {
    margin-bottom: auto !important;
}
.mlr-auto,
.sd-margin-x--auto {
    margin-left: auto !important;
    margin-right: auto !important;
}
.sd-margin-y--auto {
    margin-top: auto !important;
    margin-bottom: auto !important;
}
.sd-margin--auto {
    margin: auto !important;
}


// flex
.sd-display-flex-column {
    display: flex;
    flex-direction: column;
    overflow: auto;
}
.sd-flex-wrap {
    flex-wrap: wrap;
}
.sd-flex-shrink {
    flex-shrink: 1 !important;
}
.sd-flex-no-shrink {
    flex-shrink: 0 !important;
}
.sd-flex-justify-end {
    justify-content: flex-end !important;
}
.sd-flex-align-items-center {
    align-items: center !important;
}
.sd-flex-grow {
    flex-grow: 1 !important;
}
.sd-flex-no-grow {
    flex-grow: 0 !important;
}

// Common margin overrides
// -------------------------------------------------

// $sd-base-increment - default size of the increment is 0.8rem;
// For example: .sd-margin-t--1 {margin-top: 0.8rem}, .sd-padding-l--2 {padding-left: 1.6rem}
$sd-increments: ('0': 0, '0-5': 0.5, '1': 1, '1-5': 1.5, '2': 2, '3': 3, '4' : 4, '5' : 5); // Number of increments, genarates new classes eg. .sd-padding-top--4, .sd-margin-top--4
$sd-sides: (top, right, bottom, left, x, y); // It's generating these sides
$sd-properties: (padding, margin); // It's generating these properties

@each $incrementName, $incrementValue in $sd-increments {
    @each $property in $sd-properties {
        @each $side in $sd-sides {
            @if($side == x) {
                .sd-#{$property}-#{$side}--#{$incrementName} {
                    #{$property}-left: #{$sd-base-increment * $incrementValue} !important;
                    #{$property}-right: #{$sd-base-increment * $incrementValue} !important;
                }
            } @else if ($side == y) {
                .sd-#{$property}-#{$side}--#{$incrementName} {
                    #{$property}-top: #{$sd-base-increment * $incrementValue} !important;
                    #{$property}-bottom: #{$sd-base-increment * $incrementValue} !important;
                }
            } @else {
                .sd-#{$property}-#{str-slice($side, 1, 1)}--#{$incrementName} {
                    #{$property}-#{$side}: #{$sd-base-increment * $incrementValue} !important;
                }
            }
        }
        .sd-#{$property}--#{$incrementName} {
            #{$property}: #{$sd-base-increment * $incrementValue} !important;
        }
    }
}

// MARGIN AND PADDING MIXINS
// You can create new classes with this syntax:
// .customClass {@include sd-margin('0-5', 'top')}
// Output:
// .customClass { margin-top: 0.8rem !important; }
// if you want the value to be applied to all sides write only the number eg. @include sd-margin('0-5')


@mixin sd-spacing($property, $sd-incrementValue, $side) {
    @if ($side == false) {
        #{$property}: #{$sd-base-increment * map-get($sd-increments, $sd-incrementValue)};
    } @else if ($side == x) {
        #{$property}-left: #{$sd-base-increment * map-get($sd-increments, $sd-incrementValue)};
        #{$property}-right: #{$sd-base-increment * map-get($sd-increments, $sd-incrementValue)};
    }
    @else if ($side == y) {
        #{$property}-top: #{$sd-base-increment * map-get($sd-increments, $sd-incrementValue)};
        #{$property}-bottom: #{$sd-base-increment * map-get($sd-increments, $sd-incrementValue)};
    }
    @else {
        #{$property}-#{$side}: #{$sd-base-increment * map-get($sd-increments, $sd-incrementValue)};
    }
}

@mixin sd-margin($sd-incrementValue, $side: false) {
    @include sd-spacing('margin', $sd-incrementValue, $side)
}

@mixin sd-padding($sd-incrementValue, $side: false) {
    @include sd-spacing('padding', $sd-incrementValue, $side)
}

//-------------------------------------------------------
// START: This part should not be used for new stuff, it's only here for older implemetation. 
// Once the implemented classes are refactored this should be removed

// padding all  (KILL THIS AFTER REFACTORING)
.sd-padding-all--0 {
    padding: 0 !important;
}
.sd-padding-all--0-5 {
    padding: $sd-base-increment * 0.5 !important;
}
.sd-padding-all--1 {
    padding: $sd-base-increment !important;
}
.sd-padding-all--1-5 {
    padding: $sd-base-increment * 1.5 !important;
}
.sd-padding-all--2 {
    padding: $sd-base-increment * 2 !important;
}
.sd-padding-all--3 {
    padding: $sd-base-increment * 3 !important;
}
// margin all (KILL THIS AFTER REFACTORING)
.sd-margin-all--0 {
    margin: 0 !important;
}
.sd-margin-all--0-5 {
    margin: $sd-base-increment * 0.5 !important;
}
.sd-margin-all--1 {
    margin: $sd-base-increment * 1 !important;
}
.sd-margin-all--1-5 {
    margin: $sd-base-increment * 1.5 !important;
}
.sd-margin-all--2 {
    margin: $sd-base-increment * 2 !important;
}
.sd-margin-all--3 {
    margin: $sd-base-increment * 3 !important;
}
// END
//-------------------------------------------------------


// Overlay block

.sd-overlay-block {
    position: relative;
    
    img {
        width: 100%;
    }
    
    &__overlay {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        background-color: rgba(0, 0, 0, 0.5);
        transition: 0.2s linear opacity;   
        opacity: 0;
        color: #fff;
    }

    &:hover {
        .sd-overlay-block__overlay {
            opacity: 1;
        }
    }

    &__overlay-action-group {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        flex-grow: 1;        
    }

    &__overlay-action {
        flex-grow: 0;
        flex-shrink: 0;
        color: #fff;
        width: 5.6rem;
        height: 5.6rem;
        border: 2px solid rgba(255, 255, 255, 0.5);
        border-radius: $border-radius__base--full;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        transition: 0.2s linear all;
        cursor: pointer;
        text-decoration: none;
        background-color: transparent;
    
        i {
            color: #fff;
            height: 2.4rem;
            width: 2.4rem;
            font-size: 2.4rem;
            line-height: 1;
            opacity: 0.5;
            transition: 0.2s linear all;
        }

        &:hover {
            border-color: white;
            background-color: rgba(0, 0, 0, 0.4);
            text-decoration: none;

            i {
                opacity: 1;
            }
        }
        + .sd-overlay-block__overlay-action {
            margin-left: 2rem;
        }
    }
    .sd-overlay-block__overlay-message {
        display: none;
        margin-top: 1rem;
        color: $grayText;
    }

    &--no-image {
        height: 160px;
        border: 2px dashed $grayDark;

        .sd-overlay-block__overlay {
            opacity: 1;
        }
        img {
            display: none;
        }
        .sd-overlay-block__overlay-action-group {
            flex-direction: column;
        }
        .sd-overlay-block__overlay-message {
            display: block;
        }
    }
}

.sd-wrap-helper {
    display: contents !important;
 }

 .sd-word-break--all {
    word-break: break-all;
 }

 .sd-accessibility__btn-text--invisible, .sd-accessibility__screenreader-text {
     position: absolute;
     top: 0;
     left: 0;
     font-size: 0.1rem;
     color: transparent !important;
     pointer-events: none;
 }
